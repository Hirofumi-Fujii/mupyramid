このパッケージについて

このパッケージは、1F1 用のパッケージを、E-hall における
5ユニット観測用に修正したものです。


　　　　　　　　　　　　　　　　　　　　　藤井啓文
                                      (2015年10月16日初版）

以下は、1F1 用のパッケージからコピー。

===================================================================
このパッケージは 1F1 での rawdata からの同期事象の抽出と、
その簡単な解析をするプログラムのソースパッケージです。
以下の五つのプログラムを作成することができます。
-----------------------------------------------------------------
[使用法]
-----------------------------------------------------------------
１）gencoinz
このプログラムは、rawdata から同期事象を抽出します。
detector1 (DAT1,DAT2,DAT3を使用）、detector2（DAT4,DAT5,DAT6を使用）
は自動で判別します。

    gencoinz [options] filename

filename に rawdata file を指定します。gzip 圧縮
されていても、いなくても動作します。
出力は標準出力です。通常は、redirect してファイルにしてください。
現在のテストでは標準 30分 run で 1 M バイトを少し超えるぐらいです。

option として指定できるのは
  -width  n      ユニット間の同期時間幅を指定します（指定値以下を同期、
                 すなわち指定値は同期に含まれる）。
                 単位はナノ秒です。指定しなかった場合は 32ナノです。
  -merge  n      一つのユニット内での僅差データを merge して一つのデータ
                 として扱います。その merge する時間幅を指定します
                （指定値以下を merge、すなわち指定値は merge される）。
                 単位はナノ秒です。指定しなかった場合は 8ナノ秒です。
  -out filename  出力ファイルを指定します。ファイルは gzip 圧縮されます。
                 指定しない場合は、標準出力になり、この場合は gzip 圧縮
                 されません。
  -longdump      同期 record の他、同期した raw data record も出力します。
                 （ファイルサイズが 5-6 倍になります。解析に必要な情報は
                 同期 record にありますので、通常は不要と思います。）
です。
-------------------------------------------------------------------
２）coinanaz
上記出力を解析して、すべての組み合わせについて同期事象数を出します。

      coinanaz filename

として使います。gencoinz と同様、gzip 圧縮されていてもいなくても
構いません。
Type[01*] は 0 番目のユニットと 1 番目のユニットが同期した数で、
すべての数、クラスタ数がXYともに 1 の数、ヒット数がXYともに 1 の数
と並んでいます。
--------------------------------------------------------------------
４）coinrate
リストに記載された同期ファイルを順に解析して事象率を出力します。

      coinrate listfile

として使います。gencoinz と同様、gzip 圧縮されていてもいなくても
構いません。
計測時間は、最初の同期事象のマイクロ秒カウンタの時刻と最後の
同期事象のマイクロ秒カウンタの時刻の差としています（ナノ秒
カウンタは使っていません）。時刻差が 1 秒未満の場合は何も
しません。
出力は1行1 runで、各欄は TAB で区切られています。Excel などの
表計算ソフトウェアで開く時は TAB 区切りのテキストファイルとして
開いてください。
--------------------------------------------------------------------
５）coinimg
gencoinz の（複数の）出力ファイルから (dx,dy) の画像を作ります。

	coinimg listfile [type]

listfile は1行毎に gencoinz の出力ファイル名を書いたものです。
listfile に書かれたファイルが全部足しあわされます。
type は 0,1,2,3 のいずれかを指定します。
0 は 0 と 1 の同期で、cluster 1, hitは 3 以下
1 は 0 と 2 の同期で、cluster 1, hitは 3 以下
2 は 1 と 2 の同期で、cluster 1, hitは 3 以下
3 は 0,1,2 の同期で、0 と 2 による (dx,dy) で、cluster 1, hit は 3 以下
です。
出力は
coinimg.png
と
coinimg.csv
が作られます（ファイル名は決め打ちです。上書きされますので
注意してください）。
---------------------------------------------------------------------
[作成法]
g++ と zlib が必要です。
簡単な動作確認を MinGW (Windows) と、Linux (Red Hat 4.4.7)　で
行ってあります。
ソースファイルを展開したフォルダで、

make

としてください。MinGW の場合は、makefile 中の

EXEEXT =

を

EXEEXT = .exe

としてください。
--------------------------------------------------------------------

gencoinz の出力について

gencoin が独自に出力する record は基本的に COIN record のみです（起動
情報を残すためINFO record も出力します）。
rawdata file から DATx record を取り出し、解析します。それ以外の
record は、そのまま出力します。

COIN record の format は

COIN n1 n2 n3 xh1 xc1 xav1 yh1 yc1 yav1 usec1 nsec1 xh2 xc2 xav2 yh2 yc2 yav2 usec2 nsec2 xh3 xc3 xav3 yh3 yc3 yav3 usec3 nsec3

です。
最初の n1 n2 n3 は、coincidence window に入った各ユニットの事象数です。
以下
xh*   x-plane での hit 数
xc*   x-plane での cluster 数
xav*  x の平均値（整数、チャネル数の10倍単位、すなわちほぼミリメートル）
yh*   y-plane での hit 数
yc*   y-plane での cluster 数
yav*  y の平均値（整数、チャネル数の10倍単位、すなわちほぼミリメートル）
usec* マイクロ秒カウンタの値
nsec* ナノ秒カウンタの値
が、ユニット数（３ユニット）出力されます。coincidence window に入っていない
ユニットの値は不定です。最初の n1 n2 n3 で、どれが有効かを判断して
ください。

